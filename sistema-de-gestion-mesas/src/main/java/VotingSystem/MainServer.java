//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `MainServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VotingSystem;

public interface MainServer extends com.zeroc.Ice.Object
{
    MesaInfo[] obtenerEstadoMesas(com.zeroc.Ice.Current current);

    MesaInfo obtenerEstadoMesa(int mesaId, com.zeroc.Ice.Current current);

    void actualizarEstadoMesa(int mesaId, String estado, com.zeroc.Ice.Current current);

    int obtenerTotalVotos(com.zeroc.Ice.Current current);

    int obtenerVotosMesa(int mesaId, com.zeroc.Ice.Current current);

    String generarResultadosParciales(int mesaId, com.zeroc.Ice.Current current);

    String generarResultadosFinales(com.zeroc.Ice.Current current);

    AlertaInfo[] obtenerAlertas(com.zeroc.Ice.Current current);

    void registrarAlerta(AlertaInfo alerta, com.zeroc.Ice.Current current);

    void limpiarAlertas(com.zeroc.Ice.Current current);

    void cerrarVotacion(com.zeroc.Ice.Current current);

    void cerrarMesa(int mesaId, com.zeroc.Ice.Current current);

    boolean validarMesaActiva(int mesaId, com.zeroc.Ice.Current current);

    String obtenerEstadisticas(com.zeroc.Ice.Current current);

    int contarMesasActivas(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::VotingSystem::MainServer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::VotingSystem::MainServer";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerEstadoMesas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        MesaInfo[] ret = obj.obtenerEstadoMesas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MesaInfoListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerEstadoMesa(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_mesaId;
        iceP_mesaId = istr.readInt();
        inS.endReadParams();
        MesaInfo ret = obj.obtenerEstadoMesa(iceP_mesaId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MesaInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_actualizarEstadoMesa(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_mesaId;
        String iceP_estado;
        iceP_mesaId = istr.readInt();
        iceP_estado = istr.readString();
        inS.endReadParams();
        obj.actualizarEstadoMesa(iceP_mesaId, iceP_estado, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerTotalVotos(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        int ret = obj.obtenerTotalVotos(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerVotosMesa(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_mesaId;
        iceP_mesaId = istr.readInt();
        inS.endReadParams();
        int ret = obj.obtenerVotosMesa(iceP_mesaId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_generarResultadosParciales(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_mesaId;
        iceP_mesaId = istr.readInt();
        inS.endReadParams();
        String ret = obj.generarResultadosParciales(iceP_mesaId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_generarResultadosFinales(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String ret = obj.generarResultadosFinales(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerAlertas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        AlertaInfo[] ret = obj.obtenerAlertas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        AlertaInfoListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registrarAlerta(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        AlertaInfo iceP_alerta;
        iceP_alerta = AlertaInfo.ice_read(istr);
        inS.endReadParams();
        obj.registrarAlerta(iceP_alerta, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_limpiarAlertas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.limpiarAlertas(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_cerrarVotacion(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        obj.cerrarVotacion(current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_cerrarMesa(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_mesaId;
        iceP_mesaId = istr.readInt();
        inS.endReadParams();
        obj.cerrarMesa(iceP_mesaId, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_validarMesaActiva(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        int iceP_mesaId;
        iceP_mesaId = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.validarMesaActiva(iceP_mesaId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerEstadisticas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String ret = obj.obtenerEstadisticas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_contarMesasActivas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        int ret = obj.contarMesasActivas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "actualizarEstadoMesa",
        "cerrarMesa",
        "cerrarVotacion",
        "contarMesasActivas",
        "generarResultadosFinales",
        "generarResultadosParciales",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "limpiarAlertas",
        "obtenerAlertas",
        "obtenerEstadisticas",
        "obtenerEstadoMesa",
        "obtenerEstadoMesas",
        "obtenerTotalVotos",
        "obtenerVotosMesa",
        "registrarAlerta",
        "validarMesaActiva"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_actualizarEstadoMesa(this, in, current);
            }
            case 1:
            {
                return _iceD_cerrarMesa(this, in, current);
            }
            case 2:
            {
                return _iceD_cerrarVotacion(this, in, current);
            }
            case 3:
            {
                return _iceD_contarMesasActivas(this, in, current);
            }
            case 4:
            {
                return _iceD_generarResultadosFinales(this, in, current);
            }
            case 5:
            {
                return _iceD_generarResultadosParciales(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 10:
            {
                return _iceD_limpiarAlertas(this, in, current);
            }
            case 11:
            {
                return _iceD_obtenerAlertas(this, in, current);
            }
            case 12:
            {
                return _iceD_obtenerEstadisticas(this, in, current);
            }
            case 13:
            {
                return _iceD_obtenerEstadoMesa(this, in, current);
            }
            case 14:
            {
                return _iceD_obtenerEstadoMesas(this, in, current);
            }
            case 15:
            {
                return _iceD_obtenerTotalVotos(this, in, current);
            }
            case 16:
            {
                return _iceD_obtenerVotosMesa(this, in, current);
            }
            case 17:
            {
                return _iceD_registrarAlerta(this, in, current);
            }
            case 18:
            {
                return _iceD_validarMesaActiva(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
