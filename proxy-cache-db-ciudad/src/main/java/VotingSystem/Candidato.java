//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `ProxyCacheDBCiudad.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VotingSystem;

public class Candidato implements java.lang.Cloneable,
                                  java.io.Serializable
{
    public int id;

    public String documento;

    public String nombres;

    public String apellidos;

    public String partido;

    public Candidato()
    {
        this.documento = "";
        this.nombres = "";
        this.apellidos = "";
        this.partido = "";
    }

    public Candidato(int id, String documento, String nombres, String apellidos, String partido)
    {
        this.id = id;
        this.documento = documento;
        this.nombres = nombres;
        this.apellidos = apellidos;
        this.partido = partido;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Candidato r = null;
        if(rhs instanceof Candidato)
        {
            r = (Candidato)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                return false;
            }
            if(this.documento != r.documento)
            {
                if(this.documento == null || r.documento == null || !this.documento.equals(r.documento))
                {
                    return false;
                }
            }
            if(this.nombres != r.nombres)
            {
                if(this.nombres == null || r.nombres == null || !this.nombres.equals(r.nombres))
                {
                    return false;
                }
            }
            if(this.apellidos != r.apellidos)
            {
                if(this.apellidos == null || r.apellidos == null || !this.apellidos.equals(r.apellidos))
                {
                    return false;
                }
            }
            if(this.partido != r.partido)
            {
                if(this.partido == null || r.partido == null || !this.partido.equals(r.partido))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::VotingSystem::Candidato");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, documento);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, nombres);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, apellidos);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, partido);
        return h_;
    }

    public Candidato clone()
    {
        Candidato c = null;
        try
        {
            c = (Candidato)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.id);
        ostr.writeString(this.documento);
        ostr.writeString(this.nombres);
        ostr.writeString(this.apellidos);
        ostr.writeString(this.partido);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readInt();
        this.documento = istr.readString();
        this.nombres = istr.readString();
        this.apellidos = istr.readString();
        this.partido = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Candidato v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Candidato ice_read(com.zeroc.Ice.InputStream istr)
    {
        Candidato v = new Candidato();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Candidato> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Candidato v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Candidato> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Candidato.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Candidato _nullMarshalValue = new Candidato();

    /** @hidden */
    public static final long serialVersionUID = -4003261494405715092L;
}
