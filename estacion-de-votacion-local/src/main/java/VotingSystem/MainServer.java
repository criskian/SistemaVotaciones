//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `MainServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VotingSystem;

public interface MainServer extends com.zeroc.Ice.Object
{
    MesaInfo[] listarMesas(com.zeroc.Ice.Current current);

    boolean validarVoto(String idVotante, com.zeroc.Ice.Current current);

    boolean registrarVoto(String idVotante, int idCandidato, com.zeroc.Ice.Current current);

    boolean verificarEstado(String idVotante, com.zeroc.Ice.Current current);

    boolean addLoteVotos(LoteVotos lote, com.zeroc.Ice.Current current);

    Candidato[] listarCandidatos(com.zeroc.Ice.Current current);

    void registrarAlerta(AlertaInfo alerta, com.zeroc.Ice.Current current);

    AlertaInfo[] listarAlertas(com.zeroc.Ice.Current current);

    Estadisticas obtenerEstadisticas(com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::VotingSystem::MainServer"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::VotingSystem::MainServer";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listarMesas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        MesaInfo[] ret = obj.listarMesas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MesaInfoSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_validarVoto(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_idVotante;
        iceP_idVotante = istr.readString();
        inS.endReadParams();
        boolean ret = obj.validarVoto(iceP_idVotante, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registrarVoto(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_idVotante;
        int iceP_idCandidato;
        iceP_idVotante = istr.readString();
        iceP_idCandidato = istr.readInt();
        inS.endReadParams();
        boolean ret = obj.registrarVoto(iceP_idVotante, iceP_idCandidato, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_verificarEstado(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_idVotante;
        iceP_idVotante = istr.readString();
        inS.endReadParams();
        boolean ret = obj.verificarEstado(iceP_idVotante, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_addLoteVotos(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        LoteVotos iceP_lote;
        iceP_lote = LoteVotos.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.addLoteVotos(iceP_lote, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listarCandidatos(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Candidato[] ret = obj.listarCandidatos(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CandidatoSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registrarAlerta(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        AlertaInfo iceP_alerta;
        iceP_alerta = AlertaInfo.ice_read(istr);
        inS.endReadParams();
        obj.registrarAlerta(iceP_alerta, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listarAlertas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        AlertaInfo[] ret = obj.listarAlertas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        AlertaInfoSeqHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerEstadisticas(MainServer obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Estadisticas ret = obj.obtenerEstadisticas(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Estadisticas.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "addLoteVotos",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "listarAlertas",
        "listarCandidatos",
        "listarMesas",
        "obtenerEstadisticas",
        "registrarAlerta",
        "registrarVoto",
        "validarVoto",
        "verificarEstado"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_addLoteVotos(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_listarAlertas(this, in, current);
            }
            case 6:
            {
                return _iceD_listarCandidatos(this, in, current);
            }
            case 7:
            {
                return _iceD_listarMesas(this, in, current);
            }
            case 8:
            {
                return _iceD_obtenerEstadisticas(this, in, current);
            }
            case 9:
            {
                return _iceD_registrarAlerta(this, in, current);
            }
            case 10:
            {
                return _iceD_registrarVoto(this, in, current);
            }
            case 11:
            {
                return _iceD_validarVoto(this, in, current);
            }
            case 12:
            {
                return _iceD_verificarEstado(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
