//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Admin;

public interface AdminServerPrx extends com.zeroc.Ice.ObjectPrx
{
    default void agregarCandidato(String nombre, String partido, String cargo)
    {
        agregarCandidato(nombre, partido, cargo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void agregarCandidato(String nombre, String partido, String cargo, java.util.Map<String, String> context)
    {
        _iceI_agregarCandidatoAsync(nombre, partido, cargo, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> agregarCandidatoAsync(String nombre, String partido, String cargo)
    {
        return _iceI_agregarCandidatoAsync(nombre, partido, cargo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> agregarCandidatoAsync(String nombre, String partido, String cargo, java.util.Map<String, String> context)
    {
        return _iceI_agregarCandidatoAsync(nombre, partido, cargo, context, false);
    }

    /**
     * @hidden
     * @param iceP_nombre -
     * @param iceP_partido -
     * @param iceP_cargo -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_agregarCandidatoAsync(String iceP_nombre, String iceP_partido, String iceP_cargo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "agregarCandidato", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_nombre);
                     ostr.writeString(iceP_partido);
                     ostr.writeString(iceP_cargo);
                 }, null);
        return f;
    }

    default void modificarCandidato(String id, String nombre, String partido, String cargo)
    {
        modificarCandidato(id, nombre, partido, cargo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void modificarCandidato(String id, String nombre, String partido, String cargo, java.util.Map<String, String> context)
    {
        _iceI_modificarCandidatoAsync(id, nombre, partido, cargo, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> modificarCandidatoAsync(String id, String nombre, String partido, String cargo)
    {
        return _iceI_modificarCandidatoAsync(id, nombre, partido, cargo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> modificarCandidatoAsync(String id, String nombre, String partido, String cargo, java.util.Map<String, String> context)
    {
        return _iceI_modificarCandidatoAsync(id, nombre, partido, cargo, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param iceP_nombre -
     * @param iceP_partido -
     * @param iceP_cargo -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_modificarCandidatoAsync(String iceP_id, String iceP_nombre, String iceP_partido, String iceP_cargo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "modificarCandidato", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                     ostr.writeString(iceP_nombre);
                     ostr.writeString(iceP_partido);
                     ostr.writeString(iceP_cargo);
                 }, null);
        return f;
    }

    default void eliminarCandidato(String id)
    {
        eliminarCandidato(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void eliminarCandidato(String id, java.util.Map<String, String> context)
    {
        _iceI_eliminarCandidatoAsync(id, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> eliminarCandidatoAsync(String id)
    {
        return _iceI_eliminarCandidatoAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> eliminarCandidatoAsync(String id, java.util.Map<String, String> context)
    {
        return _iceI_eliminarCandidatoAsync(id, context, false);
    }

    /**
     * @hidden
     * @param iceP_id -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_eliminarCandidatoAsync(String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "eliminarCandidato", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                 }, null);
        return f;
    }

    default String[] listarCandidatos()
    {
        return listarCandidatos(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String[] listarCandidatos(java.util.Map<String, String> context)
    {
        return _iceI_listarCandidatosAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String[]> listarCandidatosAsync()
    {
        return _iceI_listarCandidatosAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String[]> listarCandidatosAsync(java.util.Map<String, String> context)
    {
        return _iceI_listarCandidatosAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_listarCandidatosAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listarCandidatos", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    default void procesarVotos(String zona)
    {
        procesarVotos(zona, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void procesarVotos(String zona, java.util.Map<String, String> context)
    {
        _iceI_procesarVotosAsync(zona, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> procesarVotosAsync(String zona)
    {
        return _iceI_procesarVotosAsync(zona, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> procesarVotosAsync(String zona, java.util.Map<String, String> context)
    {
        return _iceI_procesarVotosAsync(zona, context, false);
    }

    /**
     * @hidden
     * @param iceP_zona -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_procesarVotosAsync(String iceP_zona, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "procesarVotos", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_zona);
                 }, null);
        return f;
    }

    default String obtenerResultadosZona(String zona)
    {
        return obtenerResultadosZona(zona, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String obtenerResultadosZona(String zona, java.util.Map<String, String> context)
    {
        return _iceI_obtenerResultadosZonaAsync(zona, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> obtenerResultadosZonaAsync(String zona)
    {
        return _iceI_obtenerResultadosZonaAsync(zona, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> obtenerResultadosZonaAsync(String zona, java.util.Map<String, String> context)
    {
        return _iceI_obtenerResultadosZonaAsync(zona, context, false);
    }

    /**
     * @hidden
     * @param iceP_zona -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_obtenerResultadosZonaAsync(String iceP_zona, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "obtenerResultadosZona", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_zona);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default String obtenerResultadosGlobales()
    {
        return obtenerResultadosGlobales(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String obtenerResultadosGlobales(java.util.Map<String, String> context)
    {
        return _iceI_obtenerResultadosGlobalesAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> obtenerResultadosGlobalesAsync()
    {
        return _iceI_obtenerResultadosGlobalesAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> obtenerResultadosGlobalesAsync(java.util.Map<String, String> context)
    {
        return _iceI_obtenerResultadosGlobalesAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_obtenerResultadosGlobalesAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "obtenerResultadosGlobales", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default void generarReporteCSV(String tipoReporte)
    {
        generarReporteCSV(tipoReporte, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void generarReporteCSV(String tipoReporte, java.util.Map<String, String> context)
    {
        _iceI_generarReporteCSVAsync(tipoReporte, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> generarReporteCSVAsync(String tipoReporte)
    {
        return _iceI_generarReporteCSVAsync(tipoReporte, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> generarReporteCSVAsync(String tipoReporte, java.util.Map<String, String> context)
    {
        return _iceI_generarReporteCSVAsync(tipoReporte, context, false);
    }

    /**
     * @hidden
     * @param iceP_tipoReporte -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_generarReporteCSVAsync(String iceP_tipoReporte, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "generarReporteCSV", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_tipoReporte);
                 }, null);
        return f;
    }

    default void exportarResultadosExcel()
    {
        exportarResultadosExcel(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void exportarResultadosExcel(java.util.Map<String, String> context)
    {
        _iceI_exportarResultadosExcelAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> exportarResultadosExcelAsync()
    {
        return _iceI_exportarResultadosExcelAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> exportarResultadosExcelAsync(java.util.Map<String, String> context)
    {
        return _iceI_exportarResultadosExcelAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_exportarResultadosExcelAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "exportarResultadosExcel", null, sync, null);
        f.invoke(false, context, null, null, null);
        return f;
    }

    default void registrarLog(String evento, String detalle)
    {
        registrarLog(evento, detalle, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void registrarLog(String evento, String detalle, java.util.Map<String, String> context)
    {
        _iceI_registrarLogAsync(evento, detalle, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> registrarLogAsync(String evento, String detalle)
    {
        return _iceI_registrarLogAsync(evento, detalle, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> registrarLogAsync(String evento, String detalle, java.util.Map<String, String> context)
    {
        return _iceI_registrarLogAsync(evento, detalle, context, false);
    }

    /**
     * @hidden
     * @param iceP_evento -
     * @param iceP_detalle -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_registrarLogAsync(String iceP_evento, String iceP_detalle, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "registrarLog", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_evento);
                     ostr.writeString(iceP_detalle);
                 }, null);
        return f;
    }

    default String[] obtenerLogs(String fecha)
    {
        return obtenerLogs(fecha, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String[] obtenerLogs(String fecha, java.util.Map<String, String> context)
    {
        return _iceI_obtenerLogsAsync(fecha, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<String[]> obtenerLogsAsync(String fecha)
    {
        return _iceI_obtenerLogsAsync(fecha, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<String[]> obtenerLogsAsync(String fecha, java.util.Map<String, String> context)
    {
        return _iceI_obtenerLogsAsync(fecha, context, false);
    }

    /**
     * @hidden
     * @param iceP_fecha -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<String[]> _iceI_obtenerLogsAsync(String iceP_fecha, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<String[]> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "obtenerLogs", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_fecha);
                 }, istr -> {
                     String[] ret;
                     ret = istr.readStringSeq();
                     return ret;
                 });
        return f;
    }

    default boolean validarFormatoDatos(String datos)
    {
        return validarFormatoDatos(datos, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean validarFormatoDatos(String datos, java.util.Map<String, String> context)
    {
        return _iceI_validarFormatoDatosAsync(datos, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> validarFormatoDatosAsync(String datos)
    {
        return _iceI_validarFormatoDatosAsync(datos, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> validarFormatoDatosAsync(String datos, java.util.Map<String, String> context)
    {
        return _iceI_validarFormatoDatosAsync(datos, context, false);
    }

    /**
     * @hidden
     * @param iceP_datos -
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_validarFormatoDatosAsync(String iceP_datos, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "validarFormatoDatos", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_datos);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean validarIntegridadResultados()
    {
        return validarIntegridadResultados(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean validarIntegridadResultados(java.util.Map<String, String> context)
    {
        return _iceI_validarIntegridadResultadosAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> validarIntegridadResultadosAsync()
    {
        return _iceI_validarIntegridadResultadosAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> validarIntegridadResultadosAsync(java.util.Map<String, String> context)
    {
        return _iceI_validarIntegridadResultadosAsync(context, false);
    }

    /**
     * @hidden
     * @param context -
     * @param sync -
     * @return -
     **/
    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_validarIntegridadResultadosAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "validarIntegridadResultados", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), AdminServerPrx.class, _AdminServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), AdminServerPrx.class, _AdminServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), AdminServerPrx.class, _AdminServerPrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static AdminServerPrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), AdminServerPrx.class, _AdminServerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static AdminServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, AdminServerPrx.class, _AdminServerPrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static AdminServerPrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, AdminServerPrx.class, _AdminServerPrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default AdminServerPrx ice_context(java.util.Map<String, String> newContext)
    {
        return (AdminServerPrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default AdminServerPrx ice_adapterId(String newAdapterId)
    {
        return (AdminServerPrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default AdminServerPrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (AdminServerPrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default AdminServerPrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (AdminServerPrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default AdminServerPrx ice_invocationTimeout(int newTimeout)
    {
        return (AdminServerPrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default AdminServerPrx ice_connectionCached(boolean newCache)
    {
        return (AdminServerPrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default AdminServerPrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (AdminServerPrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default AdminServerPrx ice_secure(boolean b)
    {
        return (AdminServerPrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default AdminServerPrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (AdminServerPrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default AdminServerPrx ice_preferSecure(boolean b)
    {
        return (AdminServerPrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default AdminServerPrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (AdminServerPrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default AdminServerPrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (AdminServerPrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default AdminServerPrx ice_collocationOptimized(boolean b)
    {
        return (AdminServerPrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default AdminServerPrx ice_twoway()
    {
        return (AdminServerPrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default AdminServerPrx ice_oneway()
    {
        return (AdminServerPrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default AdminServerPrx ice_batchOneway()
    {
        return (AdminServerPrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default AdminServerPrx ice_datagram()
    {
        return (AdminServerPrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default AdminServerPrx ice_batchDatagram()
    {
        return (AdminServerPrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default AdminServerPrx ice_compress(boolean co)
    {
        return (AdminServerPrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default AdminServerPrx ice_timeout(int t)
    {
        return (AdminServerPrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default AdminServerPrx ice_connectionId(String connectionId)
    {
        return (AdminServerPrx)_ice_connectionId(connectionId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
     * the given connection.@param connection The fixed proxy connection.
     * @return A fixed proxy bound to the given connection.
     **/
    @Override
    default AdminServerPrx ice_fixed(com.zeroc.Ice.Connection connection)
    {
        return (AdminServerPrx)_ice_fixed(connection);
    }

    static String ice_staticId()
    {
        return "::Admin::AdminServer";
    }
}
